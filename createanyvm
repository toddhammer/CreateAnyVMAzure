#!/bin/bash

# Check if the Azure CLI is installed
if ! command -v az &> /dev/null; then
    echo "Azure CLI is not installed. Please install it before running this script."
    exit 1
fi

# Prompt the user for input
read -p "Enter the resource group name: " resourceGroup

location=""
while [[ -z $location ]]; do
    read -p "Enter the location: " location
    if ! az account list-locations --query '[].name' --output table | grep -x $location ; then
    echo "Invalid location. Please enter a valid location."
    location=""
    fi
done

read -p "Enter the virtual machine name: " vmName
read -p "Enter the virtual machine admin username: " adminUser
prompt="Enter the virtual machine admin password: "
while IFS= read -p "$prompt" -r -s -n 1 char
do
  if [[ $char == $'\0' ]]
  then
    break
  fi
    prompt='*'
    adminPassword+="$char"
done
echo ""

imagePublisher=""
while [[ -z $imagePublisher ]]; do #As long as the variable $imagePublisher is blank, keep doing the following
    read -p "Enter the image publisher: " imagePublisher  #ask for the publisher. The user will need to know this. 
    echo "Listing all available offers from publisher $imagePublisher"
	#List all the offers from that publisher
    if ! az vm image list-offers --location $location --publisher $imagePublisher --output table; then
		#if that listing fails, go back and ask for a valid publisher
        echo "Invalid publisher. Please enter a valid image publisher."
        imagePublisher=""
    fi
done
#When successful, this will output a list of image offer to the screen

imageOffer="" 
while [[ -z $imageOffer ]]; do #As long as the variable $imageOffer is blank, keep doing the following
    read -p "Enter the image offer: " imageOffer  #user will see the list from the previous successful command
    #verify the image offer is valid
    if ! az vm image list-offers --location $location --publisher $imagePublisher --output table | grep $imageOffer; then
            echo "Invalid image. Please enter a valid image."
        imageOffer=""
    fi
done

imageSKU=""
while [[ -z $imageSKU ]]; do #As long as the variable $imageSKU is blank, keep doing the following
    az vm image list-skus --offer $imageOffer --publisher $imagePublisher --location $location --query "[].name" --output table #List available SKUs
    read -p "Enter the image SKU: " imageSKU
    if ! az vm image list-skus --offer $imageOffer --publisher $imagePublisher --location $location --query "[].name" --output table | grep -x $imageSKU; then #check if the SKU is valid
        clear
        echo ""
        echo "Invalid sku. Please enter a valid image sku."
        echo ""
        sleep 2
        imageSKU=""
    fi
done

version=""
while [[ -z $version ]]; do  #As long as the variable $version is blank, keep doing the following
    az vm image list --publisher $imagePublisher --offer $imageOffer --sku $imageSKU --location $location --all --query "[].version" --output table #list all versions
    echo ""
    read -p "Enter the image offer: " version
    if ! az vm image list --publisher $imagePublisher --offer $imageOffer --sku $imageSKU --location $location --all --query "[].version" --output table | grep -x $version; then
        clear
        echo ""
        echo "Invalid version. Please enter a valid sku version."
        echo ""
        sleep 2
        version=""
    fi
done

# Set the disk size to 128 GB
osDiskSize=128

# Set the VM size to Standard_DS2
vmSize=Standard_DS2

# Create a resource group
az group create --name $resourceGroup --location $location

# Create a public IP address with static allocation method
az network public-ip create \
    --resource-group $resourceGroup \
    --name ${vmName}-public-ip \
    --location $location \
    --sku Standard \
    --allocation-method Static

# Get the public IP address ID
publicIpId=$(az network public-ip show --resource-group $resourceGroup --name ${vmName}-public-ip --query "id" --output tsv)

clear

echo "Starting VM Creation" 
echo ""
# Create a virtual machine with the selected SKU and VM size
az vm create \
    --resource-group $resourceGroup \
    --name $vmName \
    --location $location \
    --size $vmSize \
    --image $imagePublisher:$imageOffer:$imageSKU:$version \
    --admin-username $adminUser \
    --admin-password $adminPassword \
    --os-disk-size-gb $osDiskSize \
    --public-ip-address $publicIpId
